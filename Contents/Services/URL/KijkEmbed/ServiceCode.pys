import re
import urllib2
import ssl

VIDEO_URL = "https://embed.kijk.nl/api/video/"
VIDEO_URL_AFTER = "?id=kijkapp"

HTTP_HEADERS = {
	'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/602.3.12 (KHTML, like Gecko) Version/10.0.2 Safari/602.3.12'
}

####################################################################################################
def MetadataObjectForURL(url):
	try:
		json_obj = JSON.ObjectFromURL(getUrl(url), headers=HTTP_HEADERS, cacheTime=0)["metadata"]
	except:
		raise Ex.MediaNotAvailable

	try:
		title = json_obj["title"]
	except:
		title = ''

	try:
		seasonString = json_obj["comscore"]["sbs_season"]
		episodeString = json_obj["comscore"]["sbs_episode"]
		season = int(seasonString)
		episode = int(episodeString)
	except:
		seasonString = ''
		episodeString = ''
		season = 1
		episode = 1

	thumb = Resource.ContentsOfURLWithFallback(json_obj["thumb"], '')
	art = Resource.ContentsOfURLWithFallback(json_obj["poster"], '')

	try:
		duration = int(json_obj["duration"])*1000
	except:
		duration = 0

	return EpisodeObject(
		title = title,
		thumb = thumb,
		art = art,
		season = season,
		duration = duration
	)

	####################################################################################################
def MediaObjectsForURL(url):
	mo = []

	#try:
	json_obj = JSON.ObjectFromURL(getUrl(url), headers=HTTP_HEADERS, cacheTime=0)
	#except:
	#	raise Ex.MediaNotAvailable

	try:
		videoUrl = json_obj["playlist"]
	except:
		raise Ex.MediaNotAvailable

	streams = createStreamList(videoUrl)
	for stream in streams:
		mo.append(MediaObject(
			parts = [
				PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=stream["url"], url=stream["url"])))
			],
			audio_channels = 2,
			video_resolution = stream["width"],
			optimized_for_streaming = True
		))

	if len(mo) > 0:
		return mo
	else:
		raise Ex.MediaNotAvailable

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
	if url != "" and createStreamList(url):
		return IndirectResponse(VideoClipObject, key=url)
	else:
		raise Ex.MediaNotAvailable

####################################################################################################
def getUrl(url):
	newUrl = url
	if VIDEO_URL not in newUrl:
		newUrl = VIDEO_URL+newUrl
	if VIDEO_URL_AFTER not in newUrl:
		newUrl = newUrl+VIDEO_URL_AFTER
	return newUrl

####################################################################################################
def createStreamList(url):
	root_url = url.rsplit('/', 1)[0]
	headers = {}
	gcontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
	playlist = urllib2.urlopen(url, context=gcontext).read()
	streams = []
	playlistLines = playlist.splitlines()
	for lineIndex, line in enumerate(playlistLines):
		if line.startswith('#EXT-X-KEY:METHOD=AES-128'):
			break
		if not line.startswith('#'):
			dataLine = playlistLines[lineIndex - 1]
			try:
				width = int(re.search('RESOLUTION=([0-9]+)x', dataLine).group(1))
			except:
				width = None
			stream = {'width': width, 'url': root_url + '/' + line}
			streams.append(stream)
	Log(streams)
	return streams
