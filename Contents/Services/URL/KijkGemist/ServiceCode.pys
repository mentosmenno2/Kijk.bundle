RE_JSON = Regex('var experienceJSON = {(.*?)};')

import urllib2
####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)

	subtitle = html.xpath('//h2[@itemprop="name"]//text()')[0]
	if 'Aflevering' in subtitle:
		episode = int(subtitle.split("Aflevering ")[1].split(' ')[0])
	else:
		episode = 0

	title = html.xpath('//h1[@class="page-heading"]/@title')[0].strip()
	if 'Seizoen' in title:
		season = int(title.split("Seizoen ")[1].split(' ')[0])
		title = title.split(" - Seizoen")[0]
	else:
		season = 0
	if not subtitle.startswith('Aflevering'):
		title = title+': '+subtitle

	summary = html.xpath('//div[@class="synopsis"]/p[@itemprop="description"]//text()')[0]
	#try: genre = html.xpath('//div[@class="description"]//span[@itemprop="genre"]//text()')[0]
	#except: genre = ''

	thumb = html.xpath('//div[@class="cover-cont"]//img[@itemprop="thumbnailUrl"]//@data-src')[0]

	arturl = '/'.join(url.split('/')[:5])
	try: art = HTML.ElementFromURL(arturl).xpath('//div[@class="poster"]/div/img[@itemprop="thumbnailUrl"]//@data-src')[0]
	except: art = ''

	duration = int(html.xpath('//div[@class="description"]//span[@itemprop="timeRequired"]//text()')[0].split(' ')[0])*60000

	return EpisodeObject(
		title = title,
		summary = summary,
		#genre = genre,
		duration = duration,
		index = episode,
		season = season,
		thumb = Resource.ContentsOfURLWithFallback(thumb),
		art = Resource.ContentsOfURLWithFallback(art)
	)

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	html = HTML.ElementFromURL(url)
	burl = html.xpath('//meta[@name="video_src"]/@content')[0].replace('federated_f9','htmlFederated').replace('&videoId', '&videoPlayer').replace('&videoPlayer','&%40videoPlayer')

	json = JSON.ObjectFromString(RE_JSON.search(urllib2.urlopen(burl).read()).group(0)[21:-1])
	json = json['data']['programmedContent']['videoPlayer']['mediaDTO']

	#title = json['displayName']
	#duration = json['length']
	#summary = json['longDescription']
	#thumb = json['thumbnailURL']

	mos = []

	for r in json['renditions']:
		if r['defaultURL'] == None or not r['defaultURL'].endswith('m3u8'):
			continue
		mos.append(
			MediaObject(
				parts = [
					PartObject(
						key = HTTPLiveStreamURL(Callback(PlayVideo, url=r['defaultURL'].replace('\/','/')))
					)
				],
				video_resolution = r['frameWidth'],
				audio_channels = 2,
				optimized_for_streaming = True
			)
		)

	return mos

####################################################################################################
@indirect
def PlayVideo(url):
	return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url))
