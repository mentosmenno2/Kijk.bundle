import re
import urllib2
import ssl

VIDEO_URL = "https://edge.api.brightcove.com/playback/v1/accounts/585049245001/videos/"
VIDEOFILE_URL = "https://vod-bc-prod-1.sbscdn.nl/"

HTTP_HEADERS = {
	'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/602.3.12 (KHTML, like Gecko) Version/10.0.2 Safari/602.3.12',
	'Accept': 'application/json;pk=BCpkADawqM3ve1c3k3HcmzaxBvD8lXCl89K7XEHiKutxZArg2c5RhwJHJANOwPwS_4o7UsC4RhIzXG8Y69mrwKCPlRkIxNgPQVY9qG78SJ1TJop4JoDDcgdsNrg'
}

####################################################################################################
def MetadataObjectForURL(url):
	try:
		json_obj = JSON.ObjectFromURL(getUrl(url), headers=HTTP_HEADERS, cacheTime=0)
	except:
		raise Ex.MediaNotAvailable

	try:
		title = json_obj["name"]
	except:
		title = ''

	try:
		summary = json_obj["long_description"]
	except:
		summary = ''

	try:
		seasonEpisodeString = json_obj["custom_fields"]["sbs_episode"]
		splittedSeasonEpisodeString = seasonEpisodeString.split('S')
		seasonString = splittedSeasonEpisodeString[0].replace("E", '')
		episodeString = splittedSeasonEpisodeString[1]
		season = int(seasonString)
		episode = int(episodeString)
	except:
		seasonEpisodeString = ''
		season = 1
		episode = 1

	thumb = Resource.ContentsOfURLWithFallback(json_obj["thumbnail"], '')
	art = Resource.ContentsOfURLWithFallback(json_obj["poster"], '')

	try:
		duration = json_obj["duration"]
	except:
		duration = 0

	return EpisodeObject(
		title = title,
		summary = summary,
		thumb = thumb,
		art = art,
		season = season,
		duration = duration
	)

	####################################################################################################
def MediaObjectsForURL(url):
	mo = []
	try:
		json_obj = JSON.ObjectFromURL(getUrl(url), headers=HTTP_HEADERS, cacheTime=0)
		sources = json_obj["sources"]
	except:
		raise Ex.MediaNotAvailable

	prevBestWidth = 0
	if onlyMP4():
		for s in sources:
			try:
				if(s["container"] == "MP4"):
					videoUrl = s["stream_name"].replace("mp4:", '')
					if not videoUrl.startswith(VIDEOFILE_URL):
						videoUrl = VIDEOFILE_URL+videoUrl
					if Prefs["FORCE_BEST_QUALITY"] and s["width"] > prevBestWidth:
						mo = []
						prevBestWidth = s["width"]
					mo.append(MediaObject(
						parts = [
							PartObject(key=Callback(PlayVideo, url=videoUrl, url=videoUrl))
						],
						container = Container.MP4,
						video_codec = VideoCodec.H264,
						audio_codec = AudioCodec.AAC,
						audio_channels = 2,
						video_resolution = s["width"],
						optimized_for_streaming = isOptimizedForStreaming()
					))
			except:
				pass
	else:
		for s in sources:
			try:
				if(s["container"] == "M2TS"):
					videoUrl = s["src"]
					streams = createStreamList(videoUrl)
					for stream in streams:
						if Prefs["FORCE_BEST_QUALITY"] and stream["width"] is not None and stream["width"] > prevBestWidth:
							mo = []
							prevBestWidth = stream["width"]
						mo.append(MediaObject(
							parts = [
								PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=stream["url"], url=stream["url"])))
							],
							audio_channels = 2,
							video_resolution = stream["width"],
							optimized_for_streaming = isOptimizedForStreaming()
						))
			except:
				pass
	if len(mo) > 0:
		return mo
	else:
		raise Ex.MediaNotAvailable

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
	if url.endswith('.mp4'):
		return IndirectResponse(VideoClipObject, key=url)
	if url.endswith('.m3u8') and createStreamList(url):
		return IndirectResponse(VideoClipObject, key=url)
	else:
		raise Ex.MediaNotAvailable

####################################################################################################
def getUrl(url):
	newUrl = url
	if VIDEO_URL not in newUrl:
		newUrl = VIDEO_URL+newUrl
	return newUrl

####################################################################################################
def onlyMP4():
	onlymp4 = False
	if Client.Platform == 'Samsung': #Samsung smart tv
		onlymp4 = True
	return onlymp4

####################################################################################################
def createStreamList(url):
	root_url = url.rsplit('/', 1)[0]
	headers = {}
	gcontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
	playlist = urllib2.urlopen(url, context=gcontext).read()
	streams = []
	playlistLines = playlist.splitlines()
	for lineIndex, line in enumerate(playlistLines):
		if line.startswith('#EXT-X-KEY:METHOD=AES-128'):
			break
		if not line.startswith('#'):
			dataLine = playlistLines[lineIndex - 1]
			try:
				width = int(re.search('RESOLUTION=([0-9]+)x', dataLine).group(1))
			except:
				width = None
			stream = {'width': width, 'url': root_url + '/' + line}
			streams.append(stream)
	return streams

####################################################################################################
def isOptimizedForStreaming():
	optimized = True
	if Client.Platform == 'Samsung': #Samsung smart tv
		optimized = False
	return optimized
