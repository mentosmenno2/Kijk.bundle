VIDEO_URL = "https://edge.api.brightcove.com/playback/v1/accounts/585049245001/videos/"
VIDEOFILE_URL = "https://vod-bc-prod-1.sbscdn.nl/"

HTTP_HEADERS = {
	'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/602.3.12 (KHTML, like Gecko) Version/10.0.2 Safari/602.3.12',
	'Accept': 'application/json;pk=BCpkADawqM3ve1c3k3HcmzaxBvD8lXCl89K7XEHiKutxZArg2c5RhwJHJANOwPwS_4o7UsC4RhIzXG8Y69mrwKCPlRkIxNgPQVY9qG78SJ1TJop4JoDDcgdsNrg'
}

####################################################################################################
def MetadataObjectForURL(url):
	try:
		json_obj = JSON.ObjectFromURL(getUrl(url), headers=HTTP_HEADERS, cacheTime=0)
	except:
		raise Ex.MediaNotAvailable

	try:
		title = json_obj["name"]
	except:
		title = ''

	try:
		summary = json_obj["long_description"]
	except:
		summary = ''

	try:
		seasonEpisodeString = json_obj["custom_fields"]["sbs_episode"]
		splittedSeasonEpisodeString = seasonEpisodeString.split('S')
		seasonString = splittedSeasonEpisodeString[0].replace("E", '')
		episodeString = splittedSeasonEpisodeString[1]
		season = int(seasonString)
		episode = int(episodeString)
	except:
		seasonEpisodeString = ''
		season = 1
		episode = 1

	thumb = Resource.ContentsOfURLWithFallback(json_obj["thumbnail"], '')
	art = Resource.ContentsOfURLWithFallback(json_obj["poster"], '')

	try:
		duration = json_obj["duration"]
	except:
		duration = 0

	return EpisodeObject(
		title = title,
		summary = summary,
		thumb = thumb,
		art = art,
		season = season,
		duration = duration
	)

	####################################################################################################
def MediaObjectsForURL(url):
	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, url=url))
			],
			# container = Container.MP4,
			# video_codec = VideoCodec.H264,
			# audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
	try:
		json_obj = JSON.ObjectFromURL(getUrl(url), headers=HTTP_HEADERS, cacheTime=0)
		sources = json_obj["sources"]
	except:
		raise Ex.MediaNotAvailable
	videoUrl = ""
	if onlyMP4():
		Log("This video will be played as MP4")
		try:
			for s in sources:
				if(s["container"] == "MP4"):
					videoUrl = s["stream_name"].replace("mp4:", '')
					if not videoUrl.startswith(VIDEOFILE_URL):
						videoUrl = VIDEOFILE_URL+videoUrl
		except:
			raise Ex.MediaNotAvailable
	else:
		Log("This video will be played as Stream")
		try:
			for s in sources:
				if(s["container"] == "M2TS"):
					videoUrl = s["src"]
		except:
			raise Ex.MediaNotAvailable
	if videoUrl != "":
		return IndirectResponse(VideoClipObject, key=videoUrl)
	else:
		raise Ex.MediaNotAvailable

####################################################################################################
def getUrl(url):
	newUrl = url
	if VIDEO_URL not in newUrl:
		newUrl = VIDEO_URL+newUrl
	return newUrl

####################################################################################################
def onlyMP4():
	onlymp4 = False
	if Client.Platform == 'Samsung': #Samsung smart tv
		onlymp4 = True
	return onlymp4
